// app/report/[date]/page.tsx
'use client';

import HomeButton from '@/components/HomeButton';
import { useEffect, useState } from 'react';
import Image from 'next/image'; // S·ª≠ d·ª•ng Image component c·ªßa Next.js

// --- ƒê·ªãnh nghƒ©a Types (Interfaces) ---


interface SubjectEntry {
  subjectName: string;
  content: string;
  imageUrls: string[]; // V·∫´n l√† m·∫£ng URL ·∫£nh
}

interface HomeworkReport {
  id: number;
  reportDate: string; 
  isImportant: boolean;
  SubjectEntry: SubjectEntry[]; 
}

// --- Component ch√≠nh ---

export default function  ReportPage({ params }: { params: Promise<{ date: string }> }) {
  const [reports, setReports] = useState<HomeworkReport[]>([]); 
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  // State ƒë·ªÉ qu·∫£n l√Ω ·∫£nh ƒë∆∞·ª£c click v√† hi·ªÉn th·ªã trong modal
  const [modalOpen, setModalOpen] = useState(false);
  const [selectedImage, setSelectedImage] = useState<string | null>(null);
  const [displayDate, setDisplayDate] = useState<string|null>("")

  useEffect(() => {


    async function fetchReports() {
      try {
        const param = await params;
        
        const dateToFetch = param.date.split('T')[0]; 
        setDisplayDate(dateToFetch);
        const response = await fetch(`/api/reports/${dateToFetch}`);
        
        if (response.ok) {
          const data = await response.json();
          // API GET /api/reports/:date tr·∫£ v·ªÅ M·∫¢NG c√°c b√°o c√°o cho ng√†y ƒë√≥
          // ƒêi·ªÅu ch·ªânh logic: n·∫øu API tr·∫£ v·ªÅ m·ªôt m·∫£ng, ch√∫ng ta setReports tr·ª±c ti·∫øp
          // N·∫øu API tr·∫£ v·ªÅ m·ªôt object duy nh·∫•t, b·∫°n c·∫ßn b·ªçc n√≥ trong m·∫£ng: setReports([data]);
          // D·ª±a tr√™n "API GET: L·∫•y danh s√°ch ng√†y c√≥ b√°o b√†i" v√† "if (data && data.length > 0)", 
          // c√≥ v·∫ª API GET /api/reports/:date c·ªßa b·∫°n tr·∫£ v·ªÅ m·ªôt M·∫¢NG.
          if (Array.isArray(data)) {
            setReports(data); 
          } else { // Tr∆∞·ªùng h·ª£p API ch·ªâ tr·∫£ v·ªÅ m·ªôt object, b·ªçc n√≥ trong m·∫£ng
            setReports(data ? [data] : []);
          }
        } else if (response.status === 404) {
            setReports([]); // Kh√¥ng t√¨m th·∫•y b√°o c√°o
            setError(null); // X√≥a l·ªói n·∫øu ch·ªâ l√† kh√¥ng t√¨m th·∫•y
        }
        else {
          setError(`L·ªói khi t·∫£i b√°o c√°o: ${response.statusText}`);
          setReports([]);
        }
      } catch (err) {
        console.error('Failed to fetch reports:', err);
        setError('Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn server ƒë·ªÉ t·∫£i b√°o c√°o.');
        setReports([]);
      } finally {
        setLoading(false);
      }
    }
    fetchReports();
  }, [params]); 

  // H√†m x·ª≠ l√Ω khi click v√†o ·∫£nh nh·ªè
  const handleImageClick = (imageUrl: string) => {
    setSelectedImage(imageUrl);
    // setModalOpen(true);
  };

  // H√†m ƒë√≥ng modal
  const  handleCloseModal = async () => {
    setModalOpen(false);
    setSelectedImage(null);
  };

  if (loading) {
    return (
      <div className="flex justify-center items-center h-screen">
        <p className="text-xl text-gray-600">ƒêang t·∫£i b√°o b√†i...</p>
      </div>
    );
  }

  if (reports.length === 0) {
    return (
      <div className="w-full p-4 mx-auto max-w-xl">
        <HomeButton />
        <h1 className="text-3xl font-bold text-center my-8">B√°o b√†i ng√†y {displayDate}</h1>
        {error ? (
            <p className="text-center text-lg text-red-600">{error}</p>
        ) : (
            <p className="text-center text-lg text-gray-500">
                Kh√¥ng c√≥ b√°o b√†i cho ng√†y n√†y.
            </p>
        )}
      </div>
    );
  }

  return (
    <div className="w-full p-4 mx-auto max-w-xl">
      <HomeButton />
      
      <h1 className="text-3xl md:text-4xl font-bold text-center my-8">
        B√°o b√†i ng√†y {displayDate}
      </h1>
      
      <div className="bg-white p-6 rounded-xl shadow-lg mb-6">
        {reports.some(item => item.isImportant) && (
          <p className="text-red-600 font-semibold text-center mb-4 text-xl">
            üö® ƒê√¢y l√† ng√†y quan tr·ªçng!
          </p>
        )}
        
        {reports.length > 0 ? (
          reports.map(reportItem => ( // L·∫∑p qua t·ª´ng b√°o c√°o n·∫øu c√≥ nhi·ªÅu b√°o c√°o trong ng√†y
            reportItem.SubjectEntry.map((entry: SubjectEntry, subjectIndex: number) => (
              <div key={`${reportItem.id}-${subjectIndex}`} className="mb-6 p-4 border border-gray-200 rounded-lg shadow-sm last:mb-0">
                <h2 className="text-xl font-bold text-blue-600 mb-2">{entry.subjectName}</h2>
                <p className="text-gray-700 mb-2 whitespace-pre-wrap">{entry.content}</p>
                
                {entry.imageUrls.length > 0 && (
                  <div className="flex flex-wrap gap-4 mt-4 justify-center">
                    {entry.imageUrls.map((url: string, imgIndex: number) => (
                      <div 
                        key={`${reportItem.id}-${subjectIndex}-${imgIndex}`}
                        className="relative cursor-pointer hover:opacity-80 transition-opacity duration-200"
                        onClick={() => handleImageClick(url)} // Th√™m onClick v√†o ƒë√¢y
                      >
                       <img key={imgIndex} src={url} alt={`·∫¢nh minh h·ªça ${imgIndex + 1} c·ªßa m√¥n ${entry.subjectName}`} className="max-w-full h-auto rounded-lg shadow-md max-h-60 object-cover" />
                      </div>
                    ))}
                  </div>
                )}
              </div>
            ))
          ))
        ) : (
          <p className="text-center text-gray-500">Kh√¥ng c√≥ m√¥n h·ªçc n√†o ƒë∆∞·ª£c ghi nh·∫≠n.</p>
        )}
      </div>

      {/* Modal/Lightbox Component */}
      {modalOpen && selectedImage && (
        <div 
          // Kh√¥ng c√≤n l√†m t·ªëi to√†n b·ªô n·ªÅn, nh∆∞ng v·∫´n c·ªë ƒë·ªãnh v√† cƒÉn gi·ªØa
          className="fixed inset-0 flex items-center justify-center z-50 p-4" 
          onClick={handleCloseModal} // ƒê√≥ng modal khi click ra ngo√†i n·ªôi dung ·∫£nh
        >
          <div 
            className="relative bg-white p-2 rounded-lg shadow-xl max-w-3xl max-h-full overflow-auto"
            onClick={(e) => e.stopPropagation()} // NgƒÉn ch·∫∑n s·ª± ki·ªán click lan truy·ªÅn ra ngo√†i
          >
            <button
              className="absolute top-2 right-2 text-gray-700 bg-white border border-gray-300 rounded-full p-1 hover:bg-gray-100 z-10 shadow-md" // N√∫t ƒë√≥ng m√†u s·∫Øc s√°ng h∆°n
              onClick={handleCloseModal}
            >
              <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M6 18L18 6M6 6l12 12"></path></svg>
            </button>
            <Image
              src={selectedImage}
              alt="·∫¢nh ph√≥ng to"
              layout="responsive"
              width={800} 
              height={600}
              className="rounded-lg"
              priority 
            />
          </div>
        </div>
      )}
    </div>
  );
}